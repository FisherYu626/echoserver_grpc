// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pbfile/product.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProdServiceClient is the client API for ProdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdServiceClient interface {
	GetProdStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	//客户端流定义方法 不停的接收 接收完成后响应
	UpdateProdStockClientStream(ctx context.Context, opts ...grpc.CallOption) (ProdService_UpdateProdStockClientStreamClient, error)
	//服务端流定义方法 接收后不停的响应
	GetProdStockServerStream(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (ProdService_GetProdStockServerStreamClient, error)
	//双向流定义方法 接收后不停的响应
	GetProdStockDoubleStream(ctx context.Context, opts ...grpc.CallOption) (ProdService_GetProdStockDoubleStreamClient, error)
}

type prodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProdServiceClient(cc grpc.ClientConnInterface) ProdServiceClient {
	return &prodServiceClient{cc}
}

func (c *prodServiceClient) GetProdStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/ProdService/GetProdStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodServiceClient) UpdateProdStockClientStream(ctx context.Context, opts ...grpc.CallOption) (ProdService_UpdateProdStockClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProdService_ServiceDesc.Streams[0], "/ProdService/UpdateProdStockClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &prodServiceUpdateProdStockClientStreamClient{stream}
	return x, nil
}

type ProdService_UpdateProdStockClientStreamClient interface {
	Send(*ProductRequest) error
	CloseAndRecv() (*ProductResponse, error)
	grpc.ClientStream
}

type prodServiceUpdateProdStockClientStreamClient struct {
	grpc.ClientStream
}

func (x *prodServiceUpdateProdStockClientStreamClient) Send(m *ProductRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *prodServiceUpdateProdStockClientStreamClient) CloseAndRecv() (*ProductResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prodServiceClient) GetProdStockServerStream(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (ProdService_GetProdStockServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProdService_ServiceDesc.Streams[1], "/ProdService/GetProdStockServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &prodServiceGetProdStockServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProdService_GetProdStockServerStreamClient interface {
	Recv() (*ProductResponse, error)
	grpc.ClientStream
}

type prodServiceGetProdStockServerStreamClient struct {
	grpc.ClientStream
}

func (x *prodServiceGetProdStockServerStreamClient) Recv() (*ProductResponse, error) {
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prodServiceClient) GetProdStockDoubleStream(ctx context.Context, opts ...grpc.CallOption) (ProdService_GetProdStockDoubleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProdService_ServiceDesc.Streams[2], "/ProdService/GetProdStockDoubleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &prodServiceGetProdStockDoubleStreamClient{stream}
	return x, nil
}

type ProdService_GetProdStockDoubleStreamClient interface {
	Send(*ProductRequest) error
	Recv() (*ProductResponse, error)
	grpc.ClientStream
}

type prodServiceGetProdStockDoubleStreamClient struct {
	grpc.ClientStream
}

func (x *prodServiceGetProdStockDoubleStreamClient) Send(m *ProductRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *prodServiceGetProdStockDoubleStreamClient) Recv() (*ProductResponse, error) {
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProdServiceServer is the server API for ProdService service.
// All implementations must embed UnimplementedProdServiceServer
// for forward compatibility
type ProdServiceServer interface {
	GetProdStock(context.Context, *ProductRequest) (*ProductResponse, error)
	//客户端流定义方法 不停的接收 接收完成后响应
	UpdateProdStockClientStream(ProdService_UpdateProdStockClientStreamServer) error
	//服务端流定义方法 接收后不停的响应
	GetProdStockServerStream(*ProductRequest, ProdService_GetProdStockServerStreamServer) error
	//双向流定义方法 接收后不停的响应
	GetProdStockDoubleStream(ProdService_GetProdStockDoubleStreamServer) error
	mustEmbedUnimplementedProdServiceServer()
}

// UnimplementedProdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProdServiceServer struct {
}

func (UnimplementedProdServiceServer) GetProdStock(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProdStock not implemented")
}
func (UnimplementedProdServiceServer) UpdateProdStockClientStream(ProdService_UpdateProdStockClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateProdStockClientStream not implemented")
}
func (UnimplementedProdServiceServer) GetProdStockServerStream(*ProductRequest, ProdService_GetProdStockServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProdStockServerStream not implemented")
}
func (UnimplementedProdServiceServer) GetProdStockDoubleStream(ProdService_GetProdStockDoubleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProdStockDoubleStream not implemented")
}
func (UnimplementedProdServiceServer) mustEmbedUnimplementedProdServiceServer() {}

// UnsafeProdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdServiceServer will
// result in compilation errors.
type UnsafeProdServiceServer interface {
	mustEmbedUnimplementedProdServiceServer()
}

func RegisterProdServiceServer(s grpc.ServiceRegistrar, srv ProdServiceServer) {
	s.RegisterService(&ProdService_ServiceDesc, srv)
}

func _ProdService_GetProdStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).GetProdStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProdService/GetProdStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).GetProdStock(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdService_UpdateProdStockClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProdServiceServer).UpdateProdStockClientStream(&prodServiceUpdateProdStockClientStreamServer{stream})
}

type ProdService_UpdateProdStockClientStreamServer interface {
	SendAndClose(*ProductResponse) error
	Recv() (*ProductRequest, error)
	grpc.ServerStream
}

type prodServiceUpdateProdStockClientStreamServer struct {
	grpc.ServerStream
}

func (x *prodServiceUpdateProdStockClientStreamServer) SendAndClose(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *prodServiceUpdateProdStockClientStreamServer) Recv() (*ProductRequest, error) {
	m := new(ProductRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProdService_GetProdStockServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProdServiceServer).GetProdStockServerStream(m, &prodServiceGetProdStockServerStreamServer{stream})
}

type ProdService_GetProdStockServerStreamServer interface {
	Send(*ProductResponse) error
	grpc.ServerStream
}

type prodServiceGetProdStockServerStreamServer struct {
	grpc.ServerStream
}

func (x *prodServiceGetProdStockServerStreamServer) Send(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProdService_GetProdStockDoubleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProdServiceServer).GetProdStockDoubleStream(&prodServiceGetProdStockDoubleStreamServer{stream})
}

type ProdService_GetProdStockDoubleStreamServer interface {
	Send(*ProductResponse) error
	Recv() (*ProductRequest, error)
	grpc.ServerStream
}

type prodServiceGetProdStockDoubleStreamServer struct {
	grpc.ServerStream
}

func (x *prodServiceGetProdStockDoubleStreamServer) Send(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *prodServiceGetProdStockDoubleStreamServer) Recv() (*ProductRequest, error) {
	m := new(ProductRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProdService_ServiceDesc is the grpc.ServiceDesc for ProdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProdService",
	HandlerType: (*ProdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProdStock",
			Handler:    _ProdService_GetProdStock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateProdStockClientStream",
			Handler:       _ProdService_UpdateProdStockClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetProdStockServerStream",
			Handler:       _ProdService_GetProdStockServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProdStockDoubleStream",
			Handler:       _ProdService_GetProdStockDoubleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pbfile/product.proto",
}
